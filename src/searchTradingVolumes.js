/**
 * SilverFir Bot üå≤ - [Node.js Release]
 * 
 * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –∞–∫—Ü–∏–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –æ–±–æ—Ä–æ—Ç–æ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞ 
 * =====================================================================
 * 
 * @version 1.0.0
 * @license Apache-2.0
 * @author –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω [Mikhail Shardin]
 * @site https://shardin.name/
 * @repository https://github.com/empenoso/SilverFir-TradingBot
 * 
 * Last updated: 29.09.2024
 */


const moment = require('moment');

const secrets = require('../config/secrets'); // –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
const logger = require('./services/logService'); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
const TinkoffClient = require('./grpc/tinkoffClient'); // –ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API Tinkoff Invest

const API_TOKEN = secrets.TbankSandboxMode;
const tinkoffClient = new TinkoffClient(API_TOKEN);

// –®–∞–≥ 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ü–∏–π –∏–∑ REAL_EXCHANGE_MOEX –∏ –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è 
async function getFilteredStocks() {
    try {
        // –ó–∞–ø—Ä–æ—Å –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ InstrumentsService/Shares
        const sharesPayload = {
            instrumentStatus: 'INSTRUMENT_STATUS_BASE',
            instrumentExchange: 'INSTRUMENT_EXCHANGE_UNSPECIFIED'
        };

        const response = await tinkoffClient.callApi('InstrumentsService/Shares', sharesPayload);

        // // –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö        
        // logger.info(`–û—Ç–≤–µ—Ç –æ—Ç API –¢‚Äë–ë–∞–Ω–∫: ${JSON.stringify(response, null, 2)}`);

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –±—É–º–∞–≥ –Ω–∞ REAL_EXCHANGE_MOEX
        const filteredStocks = response.instruments.filter(stock => stock.realExchange === 'REAL_EXCHANGE_MOEX');

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        const stockData = filteredStocks.map(stock => ({
            figi: stock.figi,
            ticker: stock.ticker,
            isin: stock.isin,
            name: stock.name,
            uid: stock.uid
        }));

        logger.info(`–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π ${stockData.length} —à—Ç—É–∫:\n ${JSON.stringify(stockData)}`);
        return stockData;

    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ü–∏–π: ${error.message}`);
        throw error;
    }
}

// –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ü–∏–∏ –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–º–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞
async function getCandlesForStock(stock) {
    try {
        const today = moment().format('YYYY-MM-DD');
        const threeMonthsAgo = moment().subtract(3, 'months').format('YYYY-MM-DD');

        // // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
        // logger.info(`–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥: ${threeMonthsAgo} - ${today}`);

        const candles = await tinkoffClient.getCandles(stock.figi, 'CANDLE_INTERVAL_DAY', threeMonthsAgo, today);

        // logger.info(`–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö —Å–≤–µ—á–µ–π ${stock.name}:\n ${JSON.stringify(candles.slice(0, 3), null, 2)}`);
        // logger.info(`–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä—ë—Ö —Å–≤–µ—á–µ–π ${stock.name}:\n ${JSON.stringify(candles.slice( (candles.length-3), candles.length), null, 2)}`);

        // –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º –∑–∞ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞
        const totalVolume = candles.reduce((sum, candle) => sum + parseInt(candle.volume), 0);

        return {
            ticker: stock.ticker,
            figi: stock.figi,
            uid: stock.uid,
            totalVolume
        };

    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è FIGI: ${stock.figi}, –æ—à–∏–±–∫–∞: ${error.message}`);
        throw error;
    }
}

// –®–∞–≥ 3: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ volume –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è 15 –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –æ–±—ä–µ–º—É
async function findTopStocksByTurnover() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏
        const stocks = await getFilteredStocks();

        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –∏ —Å—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ü–∏–∏
        const stockVolumes = await Promise.all(stocks.map(stock => getCandlesForStock(stock)));

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ü–∏–∏ –ø–æ –æ–±—ä–µ–º—É –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-15
        const topStocks = stockVolumes
            .sort((a, b) => b.totalVolume - a.totalVolume)
            .slice(0, 15);

        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã —Ç–∏–∫–µ—Ä–æ–≤ –∏ FIGI
        const securitiesToMonitorTikerArray = topStocks.map(stock => stock.ticker);
        const securitiesToMonitorFigiArray = topStocks.map(stock => stock.figi);
        const toPythonScript = topStocks.map(stock => ({
            ticker: stock.ticker,
            uid: stock.uid
        }));

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø-15 –∞–∫—Ü–∏–π –∏ –∏—Ö –æ–±—ä–µ–º
        logger.info(`–¢–æ–ø 15 –∞–∫—Ü–∏–π –ø–æ –æ–±—ä–µ–º—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞: ${JSON.stringify(topStocks, null, 2)}`);

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ä—ã –∏ FIGI
        logger.info(`\n\n–í—Å—Ç–∞–≤–∫–∞ –≤ config.js:\n`);
        logger.info(`\nsecuritiesToMonitorTikerArray: ${JSON.stringify(securitiesToMonitorTikerArray)}`);
        logger.info(`\nsecuritiesToMonitorFigiArray: ${JSON.stringify(securitiesToMonitorFigiArray)}`);

        logger.info(`\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∫—Ä–∏–ø—Ç–µ download_md.sh –≤ –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É:\n${securitiesToMonitorFigiArray.join('\n')}`);

        logger.info(`\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Python —Å–∫—Ä–∏–ø—Ç–µ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞:\n${JSON.stringify(toPythonScript, null, 2)}`);                

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return {
            securitiesToMonitorTikerArray,
            securitiesToMonitorFigiArray,
            topStocks
        };

    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ –∞–∫—Ü–∏–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –æ–±–æ—Ä–æ—Ç–æ–º: ${error.message}`);
    }
}


// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
findTopStocksByTurnover();