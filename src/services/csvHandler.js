/**
 * SilverFir Bot üå≤ - [Node.js Release]
 * 
 * –ú–æ–¥—É–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å CSV —Ñ–∞–π–ª–æ–º —É—á—ë—Ç–∞
 * ========================================
 * 
 * @version 1.0.0
 * @license Apache-2.0
 * @author –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω [Mikhail Shardin]
 * @site https://shardin.name/
 * @repository https://github.com/empenoso/SilverFir-TradingBot
 * 
 * Last updated: 02.10.2024
 */

const fs = require('fs');
const csv = require('csv-parser');
const { parse } = require('json2csv');
const path = require('path'); // –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏ —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
const filePath = path.join(__dirname, '../../data/+positions.csv'); // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É CSV
const logger = require('./logService'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logFunctionName = require('./logFunctionName'); // –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)


// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞
function loadPositions() {
    return new Promise((resolve, reject) => {
        const positions = [];
        fs.createReadStream(filePath)
            .pipe(csv())
            .on('data', (row) => {
                positions.push({
                    ticker: row.ticker,
                    figi: row.figi,
                    quantity: parseFloat(row.quantity), // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ float
                    purchaseDate: row.purchaseDate,
                    purchasePrice: parseFloat(row.purchasePrice), // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –≤ float
                    updateDate: row.updateDate,
                    maxPrice: parseFloat(row.maxPrice), // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –≤ float
                    profitLoss: parseFloat(row.profitLoss) // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–æ–≤ –≤ float
                });
            })
            .on('end', () => resolve(positions))
            .on('error', reject);
    });
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏—è—Ö –≤ CSV —Ñ–∞–π–ª
function savePositions(positions) {
    const csvFields = ['ticker', 'figi', 'quantity', 'purchaseDate', 'purchasePrice', 'updateDate', 'maxPrice', 'profitLoss'];
    const csvData = parse(positions, { fields: csvFields });

    fs.writeFileSync(filePath, csvData);
}

// –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ CSV —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏)
function removePosition(figi) {
    loadPositions().then(positions => {
        const updatedPositions = positions.filter(position => position.figi !== figi);
        savePositions(updatedPositions);
    });
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤ CSV —Ñ–∞–π–ª–µ
function updatePosition(newPosition) {
    loadPositions().then(positions => {
        const index = positions.findIndex(pos => pos.figi === newPosition.figi);

        if (index === -1) {
            // –î–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é
            positions.push(newPosition);
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            positions[index] = newPosition;
        }

        savePositions(positions);
    });
}

module.exports = { loadPositions, updatePosition, removePosition };