/**
 * SilverFir Bot üå≤ - [Node.js Release]
 * 
 * –ú–æ–¥—É–ª—å –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ CSV —Ñ–∞–π–ª–∞ —É—á—ë—Ç–∞ –æ—Ç–≤–µ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞ 
 * ===================================================================
 * 
 * @version 1.0.0
 * @license Apache-2.0
 * @author –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω [Mikhail Shardin]
 * @site https://shardin.name/
 * @repository https://github.com/empenoso/SilverFir-TradingBot
 * 
 * Last updated: 05.10.2024
 */

const logger = require('./logService'); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
const logFunctionName = require('./logFunctionName'); // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏

const secrets = require('../../config/secrets'); // –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
const config = require('../../config/config'); // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
const csvHandler = require('./csvHandler'); // –†–∞–±–æ—Ç–∞ —Å CSV —Ñ–∞–π–ª–∞–º–∏

const TinkoffClient = require('../grpc/tinkoffClient'); // –ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API Tinkoff Invest
const API_TOKEN = secrets.TbankSandboxMode;
const tinkoffClient = new TinkoffClient(API_TOKEN);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
async function getServerPositions() {
    try {
        const accountId = {
            accountId: secrets.AccountID
        };
        const response = await tinkoffClient.callApi('OperationsService/GetPositions', accountId);

        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        logger.info(`–í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—á–µ—Ç–∞ ${secrets.AccountID}:\n ${JSON.stringify(response, null, '\t')}\n\n`);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ü–µ–Ω–Ω—ã–º–∏ –±—É–º–∞–≥–∞–º–∏ (securities)
        return response.securities.map(sec => ({
            figi: sec.figi,
            balance: parseFloat(sec.balance) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–ª–∞–Ω—Å –≤ float
        }));
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
async function checkForDiscrepancies() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞
        var csvPositions = await csvHandler.loadPositions();

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        const serverPositions = await getServerPositions();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ CSV
        for (const csvPosition of csvPositions) {
            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞
            const serverPosition = serverPositions.find(pos => pos.figi === csvPosition.figi);

            if (serverPosition) {
                const lotSize = await tinkoffClient.getLot(csvPosition.figi);
                logger.info(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–º–∞–≥ –≤ –ª–æ—Ç–µ ${csvPosition.figi}: ${lotSize} —à—Ç.`);
                const csvTotal = csvPosition.quantity * lotSize;

                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
                if (csvTotal !== serverPosition.balance) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞
                    logger.error(`–û—à–∏–±–∫–∞: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ FIGI ${csvPosition.figi}. CSV: ${csvTotal}, –°–µ—Ä–≤–µ—Ä: ${serverPosition.balance}`);
                    throw new Error('–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∑–∏—Ü–∏–π. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏.');
                }
            } else {
                logger.error(`–û—à–∏–±–∫–∞: –ü–æ–∑–∏—Ü–∏—è —Å FIGI ${csvPosition.figi} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.`);
                throw new Error('–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∑–∏—Ü–∏–π. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏.');
            }
        }

        logger.info('–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.');
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π: ${error.message}`);
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞ (–¥–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –≤–∞—à—É –ª–æ–≥–∏–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
    checkForDiscrepancies
};

// checkForDiscrepancies().catch(logger.error);