/**
 * SilverFir Bot üå≤ - [Node.js Release]
 * 
 * –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —ç—Ç–æ–º –¢–æ—Ä–≥–æ–≤–æ–º —Ä–æ–±–æ—Ç–µ SilverFir Bot üå≤
 * ============================================================================
 * 
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ T-Invest API: https://russianinvestments.github.io/investAPI/
 * 
 * @version 1.0.0
 * @license Apache-2.0
 * @author –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω [Mikhail Shardin]
 * @site https://shardin.name/
 * @repository https://github.com/empenoso/SilverFir-TradingBot
 * 
 * Last updated: 03.11.2024
 */


// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
const secrets = require('../config/secrets'); // –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
const config = require('../config/config'); // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã

const logger = require('./services/logService'); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
const logFunctionName = require('./services/logFunctionName'); // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏

const TinkoffClient = require('./grpc/tinkoffClient'); // –º–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API Tinkoff Invest
const API_TOKEN = secrets.TbankSandboxMode;
const tinkoffClient = new TinkoffClient(API_TOKEN);

async function test() {
    logger.info(`–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ ${JSON.stringify(logFunctionName())}\n`);

    // // –ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ InstrumentsService/GetInstrumentBy
    // const testPayload = {
    //     idType: "INSTRUMENT_ID_TYPE_FIGI", // –¢–∏–ø –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ INSTRUMENT_ID_TYPE_FIGI / INSTRUMENT_ID_TYPE_UID / INSTRUMENT_ID_TYPE_TICKER
    //     id: "BBG004730N88" // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    // };
    // const response = await tinkoffClient.callApi('InstrumentsService/GetInstrumentBy', testPayload);
    // logger.info(`InstrumentsService/GetForecastBy: ${JSON.stringify(response, null, 2)}`); // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API

    // // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π InstrumentsService/Shares 
    // const testPayload = {
    //     "instrumentStatus": "INSTRUMENT_STATUS_BASE", // https://russianinvestments.github.io/investAPI/instruments/#instrumentsrequest
    //     "instrumentExchange": "INSTRUMENT_EXCHANGE_UNSPECIFIED"
    // };
    // const response = await tinkoffClient.callApi('InstrumentsService/Shares', testPayload);
    // // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
    // logger.info(`–û—Ç–≤–µ—Ç: ${JSON.stringify(response, null, 2)}`); // –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ 3 –ø–µ—Ä–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è .slice(0, 3)

}

async function instruments() {
    logger.info(`–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ ${JSON.stringify(logFunctionName())}\n`);

    // // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–∏—Ä–∂–∏
    // const response = await tinkoffClient.callApi('InstrumentsService/TradingSchedules', {});
    // logger.info(`–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–∏—Ä–∂–∏: ${JSON.stringify(response, null, 2)}`);
    // await tinkoffClient.getExchangeOpen();

    // // –ù–∞–π—Ç–∏ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏—è—Ö –≤ —Å–ø–∏—Å–∫–µ —Ñ–∞–π–ª–∞ config
    // for (const stock of config.securitiesToMonitorTikerArray) { // securitiesToMonitorFigiArray –∏–ª–∏ securitiesToMonitorTikerArray
    //     const securitiesToMonitorTikerArrayPayload = {
    //         "query": stock,
    //         "instrumentKind": "INSTRUMENT_TYPE_SHARE"
    //     };
    //     try {
    //         const FindInstrument = await tinkoffClient.callApi('InstrumentsService/FindInstrument', securitiesToMonitorTikerArrayPayload);
    //         logger.info(`–ò—â–µ–º —Ç–∏–∫–µ—Ä ${stock}:\n${JSON.stringify(FindInstrument, null, 2)}\n\n`);
    //     } catch (error) {
    //         logger.error(`–û—à–∏–±–∫–∞ ${stock}:`, error.message);
    //     }
    // }

    // // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–ª—è –∞–∫—Ü–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ —Ñ–∞–π–ª–µ config
    // for (const stock of config.securitiesToMonitorFigiArray) {
    //     try {
    //         const quote = await tinkoffClient.getQuote(stock);
    //         const name = await tinkoffClient.getName(stock);
    //         logger.info(`–¶–µ–Ω–∞ –∞–∫—Ü–∏–∏ ${name.nameCombination} [${stock}]: ${quote} —Ä—É–±.`);
    //     } catch (error) {
    //         logger.error(`–û—à–∏–±–∫–∞ ${stock}:`, error.message);
    //     }
    // }

    // // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ª–æ—Ç–æ–≤ - —ç—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏
    // for (const stock of config.securitiesToMonitorFigiArray) {
    //     try {
    //         const quote = await tinkoffClient.getLot(stock);
    //         const name = await tinkoffClient.getName(stock);
    //         logger.info(`–¢–æ—Ä–≥–æ–≤—ã–π –ª–æ—Ç –∞–∫—Ü–∏–∏ ${name.nameCombination} [${stock}] = ${quote} —à—Ç.`);
    //     } catch (error) {
    //         logger.error(`–û—à–∏–±–∫–∞ ${stock}:`, error.message);
    //     }
    // }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    for (const stock of config.securitiesToMonitorFigiArray) {
        try {
            const name = await tinkoffClient.getName(stock);
            const nameUid = name.uid;
            logger.info(`${name.nameCombination} —ç—Ç–æ ${stock} –∏–ª–∏ ${nameUid}.`);
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ ${stock}:`, error.message);
        }
    }

    // // –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ—Ç–æ–≤:
    // const figi = 'BBG004730N88'; // –ü—Ä–∏–º–µ—Ä –§–ò–ì–ò
    // const price = await tinkoffClient.getQuote(figi);
    // const quantity = await config.getPurchaseQuantity(price, figi);
    // logger.info(`–¢–µ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ—Ç–æ–≤ ${figi} –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ${quantity}`);

    // // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
    // for (const stock of config.securitiesToMonitorFigiArray) {
    //     try {
    //         const name = await tinkoffClient.getName(stock);
    //         const candles5Min = await tinkoffClient.getCandles(stock, "CANDLE_INTERVAL_5_MIN");
    //         logger.info(`5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è ${name.nameCombination}: ${JSON.stringify(candles5Min.slice(0, 3), null, 2)}`); // –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ 3 –ø–µ—Ä–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è
    //         const candlesHour = await tinkoffClient.getCandles(stock, "CANDLE_INTERVAL_HOUR");
    //         logger.info(`–ß–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏ –¥–ª—è ${name.nameCombination}: ${JSON.stringify(candlesHour.slice(0, 3), null, 2)}`); // –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ 3 –ø–µ—Ä–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è
    //         const candlesDay = await tinkoffClient.getCandles(stock, "CANDLE_INTERVAL_DAY");
    //         logger.info(`–î–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è ${name.nameCombination}: ${JSON.stringify(candlesDay.slice(0, 3), null, 2)}`); // –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ 3 –ø–µ—Ä–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è
    //     } catch (error) {
    //         logger.error(`–û—à–∏–±–∫–∞ ${stock}:`, error.message);
    //     }
    // }

    // // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
    // for (const stock of config.securitiesToMonitorFigiArray) {
    //     try {
    //         const instrument = await tinkoffClient.getName(stock);
    //         const instrumentUid = instrument.uid;
    //         const indicatorType = "INDICATOR_TYPE_SMA"; // –ü—Ä–∏–º–µ—Ä —Ç–∏–ø–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (SMA, RSI, MACD –∏ —Ç.–¥.)
    //         const interval = "INDICATOR_INTERVAL_FIVE_MINUTES"; // –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (5 –º–∏–Ω—É—Ç, —á–∞—Å, –¥–µ–Ω—å) INDICATOR_INTERVAL_ONE_HOUR
    //         const typeOfPrice = "TYPE_OF_PRICE_CLOSE"; // –¢–∏–ø —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫—Ä—ã—Ç–∏–µ)
    //         const indicators = await tinkoffClient.getTechIndicators(instrumentUid, indicatorType, interval, typeOfPrice);
    //         logger.info(`–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä ${indicatorType} –¥–ª—è ${instrument.nameCombination}: ${JSON.stringify(indicators.slice(0, 3), null, 2)}`); // –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ 3 –ø–µ—Ä–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è
    //     } catch (error) {
    //         logger.error(`–û—à–∏–±–∫–∞ ${stock}: ${error.message}`);
    //     }
    // }

    // // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –∞–∫—Ü–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ —Ñ–∞–π–ª–µ config
    // for (const stock of config.securitiesToMonitorFigiArray) {
    //     try {
    //         const charts = chart.generateCandlestickChart(stock);
    //     } catch (error) {
    //         logger.error(`–û—à–∏–±–∫–∞ ${stock}:`, error.message);
    //     }
    // }

    // // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    // tinkoffClient.placeMarketOrder('BBG004730N88', 1, 'ORDER_DIRECTION_BUY'); // –ö—É–ø–∏—Ç—å –∞–∫—Ü–∏—é
    // tinkoffClient.placeMarketOrder('BBG004730N88', 1, 'ORDER_DIRECTION_SELL'); // –ü—Ä–æ–¥–∞—Ç—å –∞–∫—Ü–∏—é

    // // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—á—ë—Ç–∞ 
    // const GetSandboxPositions = await tinkoffClient.getPortfolio();
    // logger.info(`–í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—á—ë—Ç–∞ ${secrets.AccountID}:\n ${JSON.stringify(GetSandboxPositions, null, '\t')}\n\n`);

    // // –†–∞—Å—á—ë—Ç –≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –æ—Ç –¢–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞
    // const SilverFirBotYield = await yieldCalculator.calculateAnnualYield();
    // logger.info(`–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç –¢–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞ SilverFir Bot: ${SilverFirBotYield}%.`);

    // // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–Ω–≤–µ—Å—Ç–¥–æ–º–æ–≤ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É InstrumentsService/GetForecastBy
    // const ForecastPayload = {
    //     "instrumentId": "1c69e020-f3b1-455c-affa-45f8b8049234" // –£ –ê—ç—Ä–æ—Ñ–ª–æ—Ç (AFLT), BBG004S683W7 [1c69e020-f3b1-455c-affa-45f8b8049234] –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤.
    // };
    // const response = await tinkoffClient.callApi('InstrumentsService/GetForecastBy', ForecastPayload);    
    // logger.info(`InstrumentsService/GetForecastBy: ${JSON.stringify(response, null, 2)}`); // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
}


// ======================================================================================
// ============      –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π   ===================================================
// ======================================================================================

test().catch(logger.error);
instruments().catch(err => logger.error(err));