/**
 * SilverFir Bot üå≤ - [Node.js Release]
 * 
 * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤
 * =========================================
 * 
 * @version 1.0.0
 * @license Apache-2.0
 * @author –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω [Mikhail Shardin]
 * @site https://shardin.name/
 * @repository https://github.com/empenoso/SilverFir-TradingBot
 * 
 * Last updated: 09.10.2024
 */

const secrets = require('../config/secrets'); // –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
const logger = require('./services/logService'); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
const TinkoffClient = require('./grpc/tinkoffClient'); // –ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API Tinkoff Invest

const API_TOKEN = secrets.TbankSandboxMode;
const tinkoffClient = new TinkoffClient(API_TOKEN);

// –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ü–∏—è—Ö
// –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ü–∏—è—Ö –∏–∑ API, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
const path = require('path');
const fs = require('fs');
const moment = require('moment');

// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ü–∏–∏
async function getStockData() {
    const testPayload = {
        instrumentStatus: "INSTRUMENT_STATUS_BASE",
        instrumentExchange: "INSTRUMENT_EXCHANGE_UNSPECIFIED"
    };

    const response = await tinkoffClient.callApi('InstrumentsService/Shares', testPayload);
    const stocks = response.instruments;

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ü–∏–∏ –ø–æ realExchange = REAL_EXCHANGE_MOEX
    const filteredStocks = stocks.filter(stock => stock.realExchange === 'REAL_EXCHANGE_MOEX');
    logger.info(`–í—Å–µ–≥–æ REAL_EXCHANGE_MOEX: ${filteredStocks.length}`);

    const filteredArray = filteredStocks.map(stock => ({
        figi: stock.figi,
        ticker: stock.ticker,
        uid: stock.uid,
        name: stock.name,
        countryOfRiskName: stock.countryOfRiskName,
        logoName: stock.brand.logoName.slice(0, -4)
    }));
    logger.info('\n–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ REAL_EXCHANGE_MOEX (–ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –∑–∞–ø–∏—Å–∏):', filteredArray.slice(0, 3));

    const allStocksArray = stocks.map(stock => ({
        figi: stock.figi,
        ticker: stock.ticker,
        uid: stock.uid,
        name: stock.name,
        countryOfRiskName: stock.countryOfRiskName,
        logoName: stock.brand.logoName
    }));
    logger.info(`–í—Å–µ–≥–æ –∞–∫—Ü–∏–π –≤ –æ—Ç–≤–µ—Ç–µ: ${allStocksArray.length}`);
    logger.info('\n–ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π (–ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –∑–∞–ø–∏—Å–∏):', allStocksArray.slice(0, 3));

    return {
        filteredArray,
        allStocksArray
    };
}

// –í—ã–≤–æ–¥–∏–º —Ü–µ–Ω—É –∫–æ–≥–¥–∞ –Ω–∞–¥–æ —É—á–µ—Å—Ç—å —á—Ç–æ units –∏ nano —ç—Ç–æ —Ü–µ–ª–æ–µ –∏ –¥—Ä–æ–±–Ω—ã–µ —á–∞—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞
function formatPrice(units, nano) {
    return parseFloat(`${units}.${nano}`)
}

// –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–Ω–≤–µ—Å—Ç–¥–æ–º–æ–≤
// –ù–∞–º –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.
async function getForecastsForStocks(stockArray) {
    const forecasts = [];
    let noRecommendationCount = 0; // –°—á–µ—Ç—á–∏–∫ –∞–∫—Ü–∏–π –±–µ–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    const requestInterval = 600; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É (600 –º—Å)

    for (const stock of stockArray) {

        try {
            const ForecastPayload = {
                instrumentId: stock.uid
            };

            // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            logger.info(`–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å ${JSON.stringify(ForecastPayload, null, 2)}`);

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            const forecastResponse = await tinkoffClient.callApi('InstrumentsService/GetForecastBy', ForecastPayload);

            // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API
            logger.info(`–û—Ç–≤–µ—Ç: ${JSON.stringify(forecastResponse, null, 2)}`);

            // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (forecastResponse && forecastResponse.targets && forecastResponse.targets.length > 0) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∑–∞–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                forecasts.push({
                    name: stock.name.replace("'", ""),
                    ticker: stock.ticker,
                    logo: `https://invest-brands.cdn-tinkoff.ru/${stock.logoName}x160.png`,
                    currentPrice: parseFloat(formatPrice(forecastResponse.targets[0].currentPrice.units, forecastResponse.targets[0].currentPrice.nano)),
                    consensus: parseFloat(formatPrice(forecastResponse.consensus.consensus.units, forecastResponse.consensus.consensus.nano)),
                    priceChange: parseFloat(formatPrice(forecastResponse.consensus.priceChangeRel.units, forecastResponse.consensus.priceChangeRel.nano)),
                    recommendationCount: forecastResponse.targets.length,
                    countryOfRiskName: stock.countryOfRiskName
                });

            } else {
                // –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ü–∏–π –±–µ–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                logger.info(`–£ ${stock.name} (${stock.ticker}), ${stock.figi} [${stock.uid}] –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤.\n`);
                noRecommendationCount++;
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è ${stock.ticker}:`, error);
            noRecommendationCount++;
        }

        // –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã —Å–æ–±–ª—é–¥–∞—Ç—å –ª–∏–º–∏—Ç –≤ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        await new Promise(resolve => setTimeout(resolve, requestInterval)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 600 –º—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }

    // C–∫–æ–ª—å–∫–æ –∞–∫—Ü–∏–π –Ω–µ –∏–º–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    logger.info(`–í—Å–µ–≥–æ –∞–∫—Ü–∏–π –±–µ–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${noRecommendationCount}`);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã (priceChange) –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    forecasts.sort((a, b) => {
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é: —Å–Ω–∞—á–∞–ª–∞ –∏–¥–µ—Ç –±–æ–ª—å—à–∏–π priceChange
        return b.priceChange - a.priceChange;
    });

    return forecasts;
}


// –®–∞–≥ 3: –°–æ–∑–¥–∞–¥–∏–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –µ–µ –∫–∞–∫ HTML
// –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏—è–º –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º, –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å HTML-—Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–æ—Ä—Ç–∏—Ä—É–µ–º—É—é —Ç–∞–±–ª–∏—Ü—É.

function generateHTMLTable(forecasts) {
    const html = `
    <html>
    <head>
        <style>
            body { font-family: Arial, sans-serif; }
            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
            th, td { border: 1px solid #ddd; padding: 8px; }
            th { cursor: pointer; background-color: #f2f2f2; }
            tr:hover { background-color: #f5f5f5; }
            img { width: 50px; }
        </style>
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script type="text/javascript">
            google.charts.load('current', {'packages':['table']});
            google.charts.setOnLoadCallback(drawTable);

            function drawTable() {
                var data = new google.visualization.DataTable();
                
                // Define the columns
                data.addColumn('string', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ');
                data.addColumn('string', '–¢–∏–∫–µ—Ä');
                data.addColumn('string', '–õ–æ–≥–æ—Ç–∏–ø');
                data.addColumn('number', '–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞');
                data.addColumn('number', '–ö–æ–Ω—Å–µ–Ω—Å—É—Å–Ω–∞—è —Ü–µ–Ω–∞');
                data.addColumn('number', '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ + –ø–∞–¥–µ–Ω–∏—è, %');
                data.addColumn('number', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤');
                data.addColumn('string', '–°—Ç—Ä–∞–Ω–∞');

                // Add rows from forecasts data
                data.addRows([
                    ${forecasts.map(forecast => `[
                        '${forecast.name}', 
                        '${forecast.ticker}', 
                        '<img src="${forecast.logo}" alt="Logo">',
                        ${forecast.currentPrice}, 
                        ${forecast.consensus}, 
                        ${forecast.priceChange}, 
                        ${forecast.recommendationCount}, 
                        '${forecast.countryOfRiskName}'
                    ]`).join(",")}
                ]);

                var table = new google.visualization.Table(document.getElementById('forecastTable'));

                table.draw(data, {
                    allowHtml: true,
                    showRowNumber: true,
                    width: '100%',
                    height: 'auto'
                });
            }
        </script>
    </head>
    <body>
        <h2>–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ –∏–∑ T‚ÄëBank Invest API</h2>
        <div id="forecastTable"></div>
        <p>–í—ã–±–æ—Ä–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ${new Date().toLocaleString("ru-RU")}.<br><br>
        –°–æ—Å—Ç–∞–≤–∏–ª <a href="https://shardin.name/" target="_blank">–ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω</a>.<br>
        <small>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è T‚ÄëBank Invest API + Node.JS <a href="https://habr.com/ru/articles/849556/" target="_blank">–≤ —Å—Ç–∞—Ç—å–µ –Ω–∞ –•–∞–±—Ä–µ</a>.</small></p>
    </body>
    </html>
    `;

    // Save the HTML to a file
    fs.writeFileSync(path.join(__dirname, '../data/forecastTable.html'), html);
}


// –®–∞–≥ 4: –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
// –í—ã–∑—ã–≤–∞–µ–º —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ

(async () => {
    const {
        filteredArray,
        allStocksArray
    } = await getStockData();

    const filteredForecasts = await getForecastsForStocks(filteredArray);

    generateHTMLTable(filteredForecasts);
})();